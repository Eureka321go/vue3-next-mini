{
  "compilerOptions": {
    /* 访问 https://aka.ms/tsconfig 了解更多关于此文件的信息 */

    /* 项目选项 */
    // "incremental": true,                              /* 启用增量编译，保存 .tsbuildinfo 文件以允许项目的增量编译 */
    // "composite": true,                                /* 启用约束，使 TypeScript 项目可以与项目引用一起使用 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 指定 .tsbuildinfo 增量编译文件的路径 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 在引用复合项目时，禁用优先使用源文件而不是声明文件 */
    // "disableSolutionSearching": true,                 /* 在编辑时将项目排除在多项目引用检查之外 */
    // "disableReferencedProjectLoad": true,             /* 减少 TypeScript 自动加载的项目数量 */

    /* 语言和环境 */
    "target": "es5",                                  /* 设置生成的 JavaScript 的目标版本，并包含兼容的库声明 */
    "lib": ["esnext", "dom"],                                        /* 指定一组描述目标运行时环境的捆绑库声明文件 */
    // "jsx": "preserve",                                /* 指定生成什么样的 JSX 代码 */
    // "experimentalDecorators": true,                   /* 启用对传统实验性装饰器的实验性支持 */
    // "emitDecoratorMƒetadata": true,                    /* 为源文件中的装饰声明发出设计类型元数据 */
    // "jsxFactory": "",                                 /* 指定针对 React JSX 生成时使用的 JSX 工厂函数，例如 'React.createElement' 或 'h' */
    // "jsxFragmentFactory": "",                         /* 指定针对 React JSX 生成时用于片段的 JSX Fragment 引用，例如 'React.Fragment' 或 'Fragment' */
    // "jsxImportSource": "",                            /* 在使用 'jsx: react-jsx*' 时指定用于导入 JSX 工厂函数的模块说明符 */
    // "reactNamespace": "",                             /* 指定调用 'createElement' 的对象。仅在针对 'react' JSX 生成时适用 */
    // "noLib": true,                                    /* 禁止包含任何库文件，包括默认的 lib.d.ts */
    // "useDefineForClassFields": true,                  /* 发出符合 ECMAScript 标准的类字段 */
    // "moduleDetection": "auto",                        /* 控制使用什么方法来检测模块格式的 JS 文件 */

    /* 模块选项 */
    "module": "esnext",                                /* 指定生成什么模块代码 */
    "rootDir": ".",                                  /* 指定源文件中的根文件夹 */
    "moduleResolution": "node",                     /* 指定 TypeScript 如何从给定的模块说明符查找文件 */
    "baseUrl": ".",                                  /* 指定用于解析非相对模块名称的基本目录 */
    "paths": {
      "@vue/*": ["./packages/*/src"],
    },                                      /* 指定一组将导入重新映射到其他查找位置的条目 */
    // "rootDirs": [],                                   /* 允许在解析模块时将多个文件夹视为一个文件夹 */
    // "typeRoots": [],                                  /* 指定多个像 './node_modules/@types' 这样的文件夹 */
    // "types": [],                                      /* 指定要包含的类型包名称，而不在源文件中引用 */
    // "allowUmdGlobalAccess": true,                     /* 允许从模块访问 UMD 全局变量 */
    // "moduleSuffixes": [],                             /* 在解析模块时要搜索的文件名后缀列表 */
    // "allowImportingTsExtensions": true,               /* 允许导入包含 TypeScript 文件扩展名。需要设置 '--moduleResolution bundler' 并且 '--noEmit' 或 '--emitDeclarationOnly' */
    // "rewriteRelativeImportExtensions": true,          /* 在输出文件中将相对导入路径中的 '.ts', '.tsx', '.mts', 和 '.cts' 文件扩展名重写为它们的 JavaScript 等效项 */
    // "resolvePackageJsonExports": true,                /* 在解析包导入时使用 package.json 的 'exports' 字段 */
    // "resolvePackageJsonImports": true,                /* 在解析导入时使用 package.json 的 'imports' 字段 */
    // "customConditions": [],                           /* 在解析导入时，除了解析器特定的默认值外，还要设置的条件 */
    // "noUncheckedSideEffectImports": true,             /* 检查副作用导入 */
    "resolveJsonModule": true,                        /* 启用导入 .json 文件 */
    // "allowArbitraryExtensions": true,                 /* 启用导入任何扩展名的文件，前提是存在声明文件 */
    // "noResolve": true,                                /* 禁止 'import'、'require' 或 '<reference>' 扩展 TypeScript 应该添加到项目中的文件数量 */

    /* JavaScript 支持 */
    // "allowJs": true,                                  /* 允许 JavaScript 文件成为程序的一部分。使用 'checkJS' 选项从这些文件中获取错误 */
    // "checkJs": true,                                  /* 在类型检查的 JavaScript 文件中启用错误报告 */
    // "maxNodeModuleJsDepth": 1,                        /* 指定用于检查 'node_modules' 中的 JavaScript 文件的最大文件夹深度。仅在 'allowJs' 时适用 */

    /* 生成选项 */
    // "declaration": true,                              /* 从项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件 */
    // "declarationMap": true,                           /* 为 d.ts 文件创建源映射 */
    // "emitDeclarationOnly": true,                      /* 只输出 d.ts 文件，不输出 JavaScript 文件 */
    "sourceMap": false,                                /* 为生成的 JavaScript 文件创建源映射文件 */
    // "inlineSourceMap": true,                          /* 在生成的 JavaScript 内包含源映射文件 */
    // "noEmit": true,                                   /* 禁止从编译中生成文件 */
    // "outFile": "./",                                  /* 指定将所有输出打包成一个 JavaScript 文件。如果 'declaration' 为 true，也指定一个打包所有 .d.ts 输出的文件 */
    // "outDir": "./",                                   /* 为所有生成的文件指定一个输出文件夹 */
    "removeComments": true,                           /* 禁止生成注释 */
    // "importHelpers": true,                            /* 允许每个项目从 tslib 导入一次辅助函数，而不是在每个文件中都包含它们 */
    "downlevelIteration": true,                       /* 生成更兼容但更详细且性能较低的用于迭代的 JavaScript */
    // "sourceRoot": "",                                 /* 指定调试器应该定位源代码的根路径 */
    // "mapRoot": "",                                    /* 指定调试器应该定位映射文件的位置，而不是生成的位置 */
    // "inlineSources": true,                            /* 在生成的 JavaScript 的源映射中包含源代码 */
    // "emitBOM": true,                                  /* 在输出文件的开头发出 UTF-8 字节顺序标记（BOM） */
    // "newLine": "crlf",                                /* 设置生成文件的换行符 */
    // "stripInternal": true,                            /* 禁止生成在其 JSDoc 注释中带有 '@internal' 的声明 */
    // "noEmitHelpers": true,                            /* 禁止在编译输出中生成自定义辅助函数，如 '__extends' */
    // "noEmitOnError": true,                            /* 如果报告了任何类型检查错误，则禁止生成文件 */
    // "preserveConstEnums": true,                       /* 禁止在生成的代码中擦除 'const enum' 声明 */
    // "declarationDir": "./",                           /* 指定生成的声明文件的输出目录 */

    /* 互操作约束 */
    // "isolatedModules": true,                          /* 确保每个文件都可以安全地进行转译，而不依赖于其他导入 */
    // "verbatimModuleSyntax": true,                     /* 不转换或省略任何未标记为仅类型的导入或导出，确保它们根据 'module' 设置以输出文件的格式写入 */
    // "isolatedDeclarations": true,                     /* 要求在导出上有足够的注释，以便其他工具可以轻松生成声明文件 */
    // "allowSyntheticDefaultImports": true,             /* 当模块没有默认导出时，允许 'import x from y' */
    "esModuleInterop": true,                             /* 发出额外的 JavaScript 以简化对导入 CommonJS 模块的支持。这为类型兼容性启用了 'allowSyntheticDefaultImports' */
    // "preserveSymlinks": true,                         /* 禁止将符号链接解析到其真实路径。这与 node 中的相同标志相关 */
    "forceConsistentCasingInFileNames": true,            /* 确保导入中的大小写正确 */

    /* 类型检查 */
    "strict": true,                                      /* 启用所有严格的类型检查选项 */
    "noImplicitAny": false,                            /* 对具有隐含 'any' 类型的表达式和声明启用错误报告 */
    // "strictNullChecks": true,                         /* 在类型检查时考虑 'null' 和 'undefined' */
    // "strictFunctionTypes": true,                      /* 在分配函数时，检查以确保参数和返回值是子类型兼容的 */
    // "strictBindCallApply": true,                      /* 检查 'bind'、'call' 和 'apply' 方法的参数是否与原始函数匹配 */
    // "strictPropertyInitialization": true,             /* 检查类属性是否已声明但未在构造函数中设置 */
    // "strictBuiltinIteratorReturn": true,              /* 内置迭代器使用 'undefined' 而不是 'any' 作为 'TReturn' 类型实例化 */
    // "noImplicitThis": true,                           /* 当 'this' 被赋予 'any' 类型时启用错误报告 */
    // "useUnknownInCatchVariables": true,               /* 默认将 catch 子句变量设置为 'unknown' 而不是 'any' */
    // "alwaysStrict": true,                             /* 确保始终发出 'use strict' */
    "noUnusedLocals": false,                           /* 在未读取局部变量时启用错误报告 */
    "noUnusedParameters": false,                       /* 在函数参数未读取时引发错误 */
    // "exactOptionalPropertyTypes": true,               /* 按原样解释可选属性类型，而不是添加 'undefined' */
    // "noImplicitReturns": true,                        /* 对函数中没有显式返回的代码路径启用错误报告 */
    // "noFallthroughCasesInSwitch": true,               /* 对 switch 语句中的穿透情况启用错误报告 */
    // "noUncheckedIndexedAccess": true,                 /* 在使用索引访问时将 'undefined' 添加到类型中 */
    // "noImplicitOverride": true,                       /* 确保派生类中的重写成员标有 override 修饰符 */
    // "noPropertyAccessFromIndexSignature": true,       /* 强制使用索引访问器来访问使用索引类型声明的键 */
    // "allowUnusedLabels": true,                        /* 禁用未使用标签的错误报告 */
    // "allowUnreachableCode": true,                     /* 禁用无法访问的代码的错误报告 */

    /* 完整性 */
    // "skipDefaultLibCheck": true,                      /* 跳过对与 TypeScript 一起包含的 .d.ts 文件的类型检查 */
    "skipLibCheck": true                      /* 跳过对所有 .d.ts 文件的类型检查 */
  },
  "include": ["packages/*/src"]         
}
